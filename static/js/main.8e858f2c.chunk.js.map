{"version":3,"sources":["images/astraLogo.png","images/tshLogo.png","images/candidatesLogo.png","components/form.js","components/WelcomeScreen.js","components/IndicationsScreen.js","components/firebase.js","components/Questions.js","components/FinalScreen.js","components/Problems.js","components/Problems2.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","args","state","name","email","level","e","this","setState","target","value","className","src","require","alt","htmlFor","onChange","bind","id","type","placeholder","to","React","Component","WelcomeScreen","IndicationsScreen","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","settings","timestampsInSnapshots","Questions","questions","collection","get","then","snapShots","docs","map","doc","data","randomQuestions","i","push","Math","floor","random","question","key","Question","Answers","answer","FinalScreen","onClick","alert","Problems","contentEditable","Routes","basename","process","exact","path","component","Problems2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e858f2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/astraLogo.45b0848e.png\";","module.exports = __webpack_public_path__ + \"static/media/tshLogo.6bcb4cf4.png\";","module.exports = __webpack_public_path__ + \"static/media/candidatesLogo.4a0281ef.png\";","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './form.css';\n\nclass Form extends React.Component{\n\n  constructor(args){\n    super(args)\n    this.state = {\n      name: '',\n      email: '',\n      level:'',\n    }\n  }\n\n  onChange(e){\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n      render(){\n        return(\n          <div className=\"formContainer\">\n            <img className=\"companyLogo\" src={require('../images/astraLogo.png')} alt=\"Company logo\"></img>\n            <h1 className=\"titles\"> WELCOME</h1>\n\n            <div className=\"formItems\">\n              <label htmlFor='name'>Name: </label>\n              <input \n              value= {this.state.name} \n              onChange={this.onChange.bind(this)} \n              name='name' id='name' className='name' type='text' placeholder=\"Enter first and last name\"/><br></br>\n\n              <label htmlFor='email'>Email: </label>\n              <input \n              value= {this.state.email} \n              onChange={this.onChange.bind(this)} \n              name='email' id='email' className='email' type='text' placeholder=\"Enter your email\"/><br></br>\n\n              <label htmlFor='level'>English level: </label>\n              <select id='level' name='level' className='level'\n              value={this.state.level}\n              onChange={this.onChange.bind(this)}>\n                <option value='basic'> Basic</option>\n                <option value='intermediate'> Intermediate</option>\n                <option value='advanced'> Advanced</option>\n              </select>\n            <div>\n              <p>Select your experience level: </p>\n              <input type='radio' id='experience1' name='experience' className='experience' value='junior' onChange={this.onChange.bind(this)}/>\n              <label htmlFor='experience1'>JUNIOR</label>\n              <input type='radio' id='experience2' name='experience' className='experience' value='consultor' onChange={this.onChange.bind(this)}/>\n              <label htmlFor='experience2'>CONSULTOR</label>\n              <input type='radio' id='experience3' name='experience' className='experience' value='senior' onChange={this.onChange.bind(this)}/>\n              <label htmlFor='experience3'>SENIOR</label>\n              <input type='radio' id='experience4' name='experience' className='experience' value='na' onChange={this.onChange.bind(this)}/>\n              <label htmlFor='experience4'>I DON'T KNOW</label>\n            </div>\n            </div>\n            <div className=\"btnsInContainer\">\n              <Link to=\"/\">\n                <button className=\"returnBtn\">RETURN</button>\n                </Link>\n              <Link to=\"/IndicationsScreen\">\n                <button className=\"continueBtn\">CONTINUE</button>\n              </Link>\n            </div>\n            <div>\n            {/* <p>{JSON.stringify(this.state)}</p> */}\n            </div>\n\n        \n          </div>\n        )\n      }\n    }\n\nexport default Form;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './WelcomeScreen.css';\n\nfunction WelcomeScreen () {\n  return (\n    <div className=\"welcomeContainer\">\n      <img className=\"candLogo\" src={require('../images/candidatesLogo.png')} alt=\"Candidates logo\"></img>\n      <div className=\"btnsWelContainer\">\n        <Link to=\"/form\">\n        <button className=\"postulateBtn\">POSTULATE</button>\n        </Link>\n      </div>\n      <img className=\"tshLogo\" src={require('../images/tshLogo.png')} alt=\"TSH logo\"></img>\n    </div>\n  );\n}\n\nexport default WelcomeScreen;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './IndicationsScreen.css';\n\nfunction IndicationsScreen () {\n  return (\n    <div className=\"indicationsContainer\">\n      <img className=\"companyLogo\" src={require('../images/astraLogo.png')} alt=\"Company logo\"></img>\n      <h1 className=\"titles\"> INDICATIONS</h1>\n      <p className=\"indications\">{`Welcome to the technical test, it will start once you press the \n      START TEST button below and you will have 30 minutes to complete it, so please find a stable internet connection and a\n      confortable spot to continue. \n      At first you'll see a section with theoretical questions and then you will find the technical problems accordingly to the experience \n      level selected. If you selected the I don't know option you will receive all the questions from junior to senior level.\n      Remember that you won't be able to return to the previous screen to check your answers.`}\n      <br></br><br></br>\n      {`You have the choice to finish the test at the point you decide it to just by clicking the SEND AT THIS POINT button. The results will be validated after you\n      complete the process. Be aware that you can only apply two times and in the third attempt your account will be blocked.`}</p>\n      <div className=\"btnsInContainer\">\n      <Link to=\"/form\">\n        <button className=\"returnBtn\">RETURN</button>\n        </Link>\n        <Link to=\"/Questions\">\n        <button className=\"startTestBtn\">START TEST</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default IndicationsScreen;","import * as firebase from \"firebase\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCNF7Ripu9p3_0CJta2WmYzPAklqipUepM\",\n  authDomain: \"astralab-003.firebaseapp.com\",\n  databaseURL: \"https://astralab-003.firebaseio.com\",\n  projectId: \"astralab-003\",\n  storageBucket: \"astralab-003.appspot.com\",\n  messagingSenderId: \"411705174588\",\n  appId: \"1:411705174588:web:ac03d97cd62bb3f499b139\"\n})\n// Initialize Firebase\nlet firestore=firebase.firestore()\nfirestore.settings({timestampsInSnapshots:true})\n\n\nexport default firestore;\n\n\n\n","import React, { Component } from 'react';\nimport firestore from './firebase';\nimport { Link } from \"react-router-dom\";\nimport './Questions.css';\n\nclass Questions extends Component {\n\n  state = {\n    questions: \"\",\n  }\n  componentWillMount() {\n    firestore.collection('Questions').get().then((snapShots) =>\n      this.setState({\n        questions: snapShots.docs.map((doc) => {\n          let data = doc.data()\n          data['id'] = doc.id\n          return data\n        })\n      }))\n  }\n\n  render() {\n    let questions = this.state.questions\n    let randomQuestions = []\n    if (questions) {\n      for (var i = 0; i < 5; i++) {\n        randomQuestions.push(questions[Math.floor(Math.random() * 9) + 0])\n      }\n      return (\n\n        <div className=\"questionContainer\">\n          <img className=\"companyLogo\" src={require('../images/astraLogo.png')} alt=\"Company logo\"></img>\n          <h1 className=\"titles\"> QUESTIONS</h1>\n          {randomQuestions.map((question) =>\n            <div className=\"main_container\" key={question.id}>\n              <div className=\"questionAndAnswers\">\n                <p className=\"questionTitle\">Question: {question.Question}</p>\n                <div className=\"answers_container\">\n                  <p>\n                  {question.Answers.map((answer) =>\n                    <label>\n                      <ul><input type=\"radio\" value={answer} name={question.id} />{answer}</ul>\n                    </label>\n                  )}\n                </p>\n              </div>\n            </div>\n            </div>\n          )}\n          <div className=\"nextBtnContainer\">\n            <Link to=\"/Problems\">\n            <button className=\"nextBtn\">\n              NEXT\n            </button>\n            </Link>\n          </div>\n        </div>\n\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        Loading...\n      </div>\n    );\n  }\n}\n\nexport default Questions","import React from 'react';\nimport './FinalScreen.css';\nimport { Link } from \"react-router-dom\";\n\nfunction FinalScreen () {\n\n    return (\n      <div className=\"finalContainer\">\n        <div className=\"textFinalContainer\">\n            <p className=\"finalMessage\">{`THANK YOU FOR POSTULATE!!`}\n            <br></br><br></br>\n            {`Your results will be send to the HR department once you \n            click on the button below. They will contact you shortly. Feel free to send us a comment about \n            your experience in this process, all the feedback is welcome.`}</p>\n            <label htmlFor='comment'>Comments (optional): </label><br></br>\n            <textarea name='comment' id='comment' className='comment' type='text' placeholder=\"Write a comment...\"/>\n        </div> \n        <div>\n        <Link to='/'>\n        <button className=\"sendResultsBtn\" onClick={()=>alert(\"Your results have been sent\")}>SEND RESULTS</button>\n        \n        </Link>\n        <img className=\"tshLogo\" src={require('../images/tshLogo.png')} alt=\"TSH logo\"></img>\n        </div>\n      </div>\n    );\n  }\n\n  export default FinalScreen;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Problems extends Component {\n  render(){\n    return(\n      <div>\n        <p>\n        Complete the method that takes a boolean value and return a \"Yes\" string for true, or a \"No\" string for false.\n          </p>      \n          <div contentEditable='true'>\n        <p> { `function boolToWord( bool ){\n  //...\n}`} </p>\n      </div>\n      <div>\n        <Link to='/FinalScreen'>\n        <button>\n          Enviar hasta este punto\n        </button>\n        </Link>\n        <Link to='/Problems2'>\n        <button>\n          Continuar\n        </button>\n        </Link>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default Problems\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Problems extends Component {\n  render(){\n    return(\n      <div>\n        <p>\n        Given an array, find the integer that appears an odd number of times.\n\nThere will always be only one integer that appears an odd number of times.\n          </p>      \n          <div contentEditable='true'>\n        <p> { `function findOdd(A) {\n  //happy coding!\n  return 0;\n}`} </p>\n      </div>\n      <div>\n        <Link to='/FinalScreen'>\n        <button>\n          Enviar hasta este punto\n        </button>\n        </Link>\n        <Link to='/FinalScreen'>\n        <button>\n          Continuar\n        </button>\n        </Link>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default Problems\n","import React from 'react';\nimport Form from './components/form';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport IndicationsScreen from './components/IndicationsScreen';\nimport Questions from './components/Questions';\nimport FinalScreen from './components/FinalScreen';\nimport Problems from './components/Problems';\nimport Problems2 from './components/Problems2';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nconst Routes = () => (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n   <Switch>\n        <Route exact path=\"/form\" component={Form}/>\n        <Route exact path=\"/IndicationsScreen\" component={IndicationsScreen}/>\n        <Route exact path=\"/Questions\" component={Questions}/>\n        <Route exact path=\"/Problems\" component={Problems}/>\n        <Route exact path=\"/Problems2\" component={Problems2}/>\n        <Route exact path=\"/FinalScreen\" component={FinalScreen}/>\n        <Route exact path=\"/\" component={WelcomeScreen}/>\n    </Switch>\n    </HashRouter>\n)\n\nexport default Routes","import React from 'react';\nimport './App.css';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <section className=\"mainComponent\">\n      <Routes/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App className=\"appStyle\" />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}